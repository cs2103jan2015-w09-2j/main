//@author: a0108436h-unused



	/**
	 * origin: C:\Users\Ganga\workspace\main\src\OneTagParser.java
	 */

//These codes were not used as we found a faster way to do things.
/*
/** This method converts the MONTH_TYPE to the position they occupy in the year (Jan == 1, Dec == 12)
 * 
 * @param month
 * @return Number of month
 *
private static int convertStringMonthToIntMonth(MONTH_TYPE month) {
	switch(month){
	case JAN:
		return MONTH_ONE; 	
	case FEB:
		return MONTH_TWO;
	case MAR:
		return MONTH_THREE;
	case APR:
		return MONTH_FOUR;
	case MAY:
		return MONTH_FIVE;
	case JUN:
		return MONTH_SIX;
	case JUL:
		return MONTH_SEVEN;
	case AUG:
		return MONTH_EIGHT;
	case SEP:
		return MONTH_NINE; 	
	case OCT:
		return MONTH_TEN;
	case NOV:
		return MONTH_ELEVEN;
	case DEC:
		return MONTH_TWELVE;
	default:
		return MONTH_DEFAULT; 
	}
}*/







/*		String taskDescription = userChanges.substring(0,posLastFrom).trim();
String dateTimeString = userChanges.substring(posLastFrom + 1).trim();
if(dateTimeString.contains("to")){
  int posLastTo = userChanges.lastIndexOf("to");
  String stringFrom = dateTimeString.substring(0,posLastTo).trim();
  String stringTo = dateTimeString.substring(posLastTo+1).trim();
  if(isValidDateTime(stringFrom) && isValidDateTime(stringTo)){
	  LocalDateTime startTime = parseDateTime(stringFrom);
	  LocalDateTime endTime = parseDateTime(stringTo);
	  return new _________
			  
			  
			  
			  
  }
  
  '
}else if(isValidDateTime(dateTimeString)){
	dateTime = parseDate(dateTimeString);
	return new EditCmd(index,parseDate,2);
}

/*	return null;
}
return null;
}
*/






/*
if(userChanges.contains(BY)||userChanges.contains(TO)||userChanges.contains(FROM)){//Means contains a keywords.
if(userChanges.contains(BY) && !userChanges.contains(FROM) && !userChanges.contains(TO)){
	//PARSE DEADLINE TASK 
}else if(userChanges.contains(BY) && userChanges.contains(FROM) && !userChanges.contains(TO))''
		
		
		)





}




return null;
}

/*
}
String endDateTimeString, startDateTimeString; 
String deadlineDateTimeString;
boolean isToTime = false;
boolean isFromTime = false;
boolean isTaskDescription = false;
String toDo = inputArr[1];
System.out.println("toDo : "+toDo);

String testWord,dateString;
String taskDescription = null;
int posKeyword = toDo.length() - NUM_ONE;
LocalDateTime endDateTime = null;
LocalDateTime startDateTime = null, deadlineDateTime = null;
Parser dateParser = new Parser();
if(toDo.contains(FROM)|| toDo.contains(TO) || toDo.contains(BY)){
System.out.println("Keyword Detected");
String[] word = toDo.split(SPACE);
for(int count =toDo.length - 1 ; count >= NUM_ZERO; count--){
	testWord =word[count].trim();
	if(isDeadlineTask(testWord)){
		posKeyword = count;
		dateString = getDateString(word, toDo, count);
		deadlineDateTimeString = parseDate(dateString,dateParser);
		deadlineDateTime = getDateTimeFormat(deadlineDateTimeString);
		taskDescription = getTaskDescription(posKeyword,word);
		return new EditCmd(index,deadlineDateTime,2);
	}
}*/

//	taskDescription = inputArr[1];
//	return new EditCmd(index,taskDescription) ;
	/*if(checkTimedTask(testWord)){
		System.out.println("This is a check timed task");
		dateString = word[count+1] + SPACE ;
		if(posKeyword == toDo.length()- NUM_ONE){
			System.out.println("To timing is working");
			dateString = getDateTimeString(dateString, posKeyword, word,count);
			endDateTimeString = parseDate(dateString, dateParser);
			endDateTime = getDateTimeFormat(endDateTimeString);
			isToTime = true;
			posKeyword = count;
		}else{
			dateString = getNewDateTimeString(dateString, posKeyword, word,count);
			startDateTimeString = parseDate(dateString,dateParser);
			startDateTime = getDateTimeFormat(startDateTimeString); 
			isFromTime = true;
			posKeyword = count;
		    taskDescription = getTaskDescription(posKeyword, word);
		    isTaskDescription = true;
		}
}*//*else if(isDeadlineTask(testWord)){
posKeyword = count;
dateString = getDateString(word, message, count);
deadlineDateTimeString = parseDate(dateString,dateParser);
deadlineDateTime = getDateTimeFormat(deadlineDateTimeString);
taskDescription = getTaskDescription(posKeyword,word);
return new EditCmd(index,deadlineDateTime,2);
}*
/*/	
/*if(isToTime == true && isFromTime == false && isTaskDescription == false){
return new EditCmd(index,endDateTime,2);
}else if (isToTime == false && isFromTime == true && isTaskDescription == false){
return new EditCmd(index,startDateTime,1);
}else if(isToTime == true && isFromTime == false && isTaskDescription == true){
return new EditCmd(index,taskDescription,endDateTime,2);
}else if(isToTime == false && isFromTime == true && isTaskDescription == true){
return new EditCmd(index,taskDescription,endDateTime,2);
}else if(isToTime == true && isFromTime == true && isTaskDescription == true){
System.out.println("Test");
return new EditCmd(index,taskDescription, startDateTime, endDateTime);
}else if(isToTime == false && isFromTime == false && isTaskDescription == true){
return new EditCmd(index, taskDescription);
}
}*/


//System.out.println("Testing edit Cmd");

/*
	private LocalDateTime getDateTimeFormat(String endDateTimeString) {
		int[] test = getDateAndTime(endDateTimeString);
		LocalDateTime dateTime = LocalDateTime.of(test[0],test[1],test[2],test[3],test[4]);
		return dateTime;
	}
*/
/*
/**This method converts the editString into an EDIT_TYPE.
 * 
 * @param testWord
 * @return EDIT_TYPE
 *
private static EDIT_TYPE getEditCmd(String editString){
	if(editString == null){
		throw new Error(ERROR_EDIT);
	}
	if(editString.equalsIgnoreCase(DEADLINE)){
		return EDIT_TYPE.DEADLINE;
	}else if(editString.equalsIgnoreCase(ENDTIME)){
		return EDIT_TYPE.ENDTIME;
	}else if(editString.equalsIgnoreCase(ENDDATE)){
		return EDIT_TYPE.ENDDATE;
	}else if(editString.equalsIgnoreCase(STARTDATE)){
		return EDIT_TYPE.STARTDATE;
	}else if(editString.equalsIgnoreCase(STARTTIME)){
		return EDIT_TYPE.STARTTIME;
	}else{
		return EDIT_TYPE.INVALID;
	}
}


/**This method changes the month value from a String to a MONTH_TYPE value
 * 
 * @param month
 * @return MONTH_TYPE
 * 
private static MONTH_TYPE getMonth(String month){
	if(month == null){
		throw new Error(ERROR_MONTH);
	}
	if(month.equalsIgnoreCase(JAN)){
		return MONTH_TYPE.JAN;
	}else if(month.equalsIgnoreCase(FEB)){
		return MONTH_TYPE.FEB;
	}else if(month.equalsIgnoreCase(MAR)){
		return MONTH_TYPE.MAR;
	}else if(month.equalsIgnoreCase(APR)){
		return MONTH_TYPE.APR;
	}else if(month.equalsIgnoreCase(MAY)){
		return MONTH_TYPE.MAY;
	}else if(month.equalsIgnoreCase(JUN)){
		return MONTH_TYPE.JUN;
	}else if(month.equalsIgnoreCase(JUL)){
		return MONTH_TYPE.JUL;
	}else if(month.equalsIgnoreCase(AUG)){
		return MONTH_TYPE.AUG ;
	}else if(month.equalsIgnoreCase(SEP)){
		return MONTH_TYPE.SEP;
	}else if(month.equalsIgnoreCase(OCT)){
		return MONTH_TYPE.OCT;
	} else if(month.equalsIgnoreCase(NOV)){
		return MONTH_TYPE.NOV;
	} else if(month.equalsIgnoreCase(DEC)){
		return MONTH_TYPE.DEC;
	} else{
		return MONTH_TYPE.INVALID;
	}
}

//Edit Commands to use
	private static final String DEADLINE = "deadline";
	private static final String STARTTIME = "starttime";
	private static final String ENDTIME = "endtime";
	private static final String ENDDATE = "enddate";
	private static final String STARTDATE = "startdate";

	//Months
	private static final String JAN = "Jan";
	private static final String FEB = "Feb";
	private static final String MAR = "Mar";
	private static final String APR = "Apr";
	private static final String MAY = "May";
	private static final String JUN = "Jun";
	private static final String JUL = "Jul";
	private static final String AUG = "Aug";
	private static final String SEP = "Sep";
	private static final String OCT = "Oct";
	private static final String NOV = "Nov";
	private static final String DEC = "Dev";

	private static final int MONTH_ONE = 1;
	private static final int MONTH_TWO = 2;
	private static final int MONTH_THREE = 3; 
	private static final int MONTH_FOUR = 4;
	private static final int MONTH_FIVE = 5;
	private static final int MONTH_SIX = 6;
	private static final int MONTH_SEVEN = 7; 
	private static final int MONTH_EIGHT = 8;
	private static final int MONTH_NINE = 9; 
	private static final int MONTH_TEN = 10;
	private static final int MONTH_ELEVEN = 11; 
	private static final int MONTH_TWELVE = 12;
	private static final int MONTH_DEFAULT = 0;

private String swapChar(String dateTimeString) {
String[] words = dateTimeString.split(SPACE);
String properDate = " "; 
String temp = words[0];
words[0] = words[1];
words[1] = temp;
for(String element: words) {
	properDate += (element + " ");
}	
return properDate;	
}
if(dateString.contains("/") || dateString.contains("-")){
System.out.println("2 Here");
int posMonth = dateString.indexOf("/");
String month = dateString.substring(0,posMonth).trim();
System.out.println("month : "+month);
int posDay = dateString.indexOf('/', posMonth);
String day = dateString.substring(posMonth+1,posDay);
System.out.println("day : "+day);
}

/*private static int[] getDateAndTime(String testDate) {
//Sun Jan 25 12:17:00 SGT 2015
int[] info = new int[SIZE_DATE_TIME];
String[] content = testDate.split(SPACE);
String dateAndTime = content[SIZE_THREE];
String[] Time = dateAndTime.split(COLON);		
info[POS_ZERO] = Integer.parseInt(content[POS_FIVE]);
MONTH_TYPE month = getMonth(content[POS_ONE]);
info[POS_ONE] = convertStringMonthToIntMonth(month);
info[POS_TWO] =  Integer.parseInt(content[POS_TWO]);
info[POS_THREE] = Integer.parseInt(Time[POS_ZERO]);
info[POS_FOUR] = Integer.parseInt(Time[POS_ONE]);
return info;
}
*This method determines if the user has entered to modify task or wants to change time
 * 
 * @param message
 * @return true if user wants to modify tasks and false if otherwise.
 *
private boolean isEditDateTime(String message) {
	return message.contains(DEADLINE) || message.contains(STARTTIME)||message.contains(ENDTIME)||message.contains(STARTDATE)||message.contains(ENDDATE);
}*/

	// End of segment: C:\Users\Ganga\workspace\main\src\OneTagParser.java





