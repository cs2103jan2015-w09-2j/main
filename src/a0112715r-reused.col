//@author: a0112715r-reused



	/**
	 * origin: C:\Users\Ganga\workspace\main\src\UserInterface.java
	 */

		frame.addMouseMotionListener(new MouseMotionListener() {
			public void mouseMoved(MouseEvent e) {
			}

			public void mouseDragged(MouseEvent e) {
				Point currCoords = e.getLocationOnScreen();
				frame.setLocation(currCoords.x - mouseDownCoords.x,
						currCoords.y - mouseDownCoords.y);
			}
		});

	}
	// End of segment: C:\Users\Ganga\workspace\main\src\UserInterface.java





	/**
	 * origin: C:\Users\Ganga\workspace\main\src\UserInterface.java
	 */

	 */
	private void highlightKeywords() {
		StyleContext style = StyleContext.getDefaultStyleContext();
		final AttributeSet attrRed = style.addAttribute(style.getEmptySet(),
				StyleConstants.Foreground, Color.RED);
		
		final AttributeSet attrBlack = style.addAttribute(style.getEmptySet(),
				StyleConstants.Foreground, Color.BLACK);
		
		doc = new DefaultStyledDocument() {
			public void insertString(int offset, String str, AttributeSet a)
					throws BadLocationException {
				super.insertString(offset, str, a);

				String text = getText(0, getLength());
				int before = findLastNonWordChar(text, offset);
				if (before < 0)
					before = 0;
				int after = findFirstNonWordChar(text, offset + str.length());
				int wordL = before;
				int wordR = before;

				while (wordR <= after) {
					if (wordR == after
							|| String.valueOf(text.charAt(wordR))
									.matches("\\W")) {
						if (text.substring(wordL, wordR)
								.toLowerCase()
								.matches("(\\W)*(^(add)|^(delete)|^(exit)|^(edit)|^(search)|^(undo)|from(?!.*from)|to|by|^(today|upcoming|someday)|^(help)|^(done)|^(save)|^(home))")) {
							setCharacterAttributes(wordL, wordR - wordL, attrRed,
									false);
						} else {
							setCharacterAttributes(wordL, wordR - wordL,
									attrBlack, false);
						}
						wordL = wordR;
					}
					wordR++;
				}
			}

			public void remove(int offs, int len) throws BadLocationException {
				super.remove(offs, len);

				String text = getText(0, getLength());
				int before = findLastNonWordChar(text, offs);
				if (before < 0)
					before = 0;
				int after = findFirstNonWordChar(text, offs);

				if (text.substring(before, after).toLowerCase()
						.matches("(\\W)*(^(add)|^(delete)|^(exit)|^(edit)|^(search)|^(undo)|from(?!.*from)|to|by|^(today|upcoming|someday)|^(help)|^(done)|^(save)|^(home))")) {
					setCharacterAttributes(before, after - before, attrRed, false);
				} else {
					setCharacterAttributes(before, after - before, attrBlack,
							false);
				}
			}

		};
	}

	private int findLastNonWordChar(String text, int index) {
		while (--index >= 0) {
			if (String.valueOf(text.charAt(index)).matches("\\W")) 
			{
				break;
			}
		}
		return index;
	}

	private int findFirstNonWordChar(String text, int index) {
		while (index < text.length()) {
			if (String.valueOf(text.charAt(index)).matches("\\W")) {
				break;
			}
			index++;
		}
		return index;
	}

}

	// End of segment: C:\Users\Ganga\workspace\main\src\UserInterface.java





