//@author: a0108436h



	/**
	 * origin: C:\Users\Ganga\workspace\main\src\COMMAND_TYPE.java
	 */

public enum COMMAND_TYPE {
	DISPLAY, 
	ADD, 
	EDIT,
	DELETE,
	EXIT, 
	INVALID,
	DONE,
	HELP,
	SEARCH,
	UNDO,
	SAVE,
	HOME,
	TODAY,
	UPCOMING,
	SOMEDAY
}

	// End of segment: C:\Users\Ganga\workspace\main\src\COMMAND_TYPE.java





	/**
	 * origin: C:\Users\Ganga\workspace\main\src\OneTagParser.java
	 */

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;

import com.joestelmach.natty.Parser;
import com.joestelmach.natty.DateGroup;

public class OneTagParser {

	private static final int NUM_ZERO = 0;
	private static final int POS_ZERO = 0;
	private static final int NUM_ONE = 1;
	private static final int POS_ONE = 1;
	//TO SPLIT A STRING
	private static final int INPUT_SPLIT_THIRD = 2;
	private static final int INPUT_SPLIT_FIRST = 0;
	private static final int INPUT_SPLIT_SECOND = 1;	
	//private static final int INPUT_SPLIT_FOURTH = 3;	

	private static final String SPACE = " ";

	//Error Messages: WILL BE HANDLED BY CONTROLLER.
	private static final String INVALID_MSG = "invalid";
	private static final String ERROR_ADD_CMD = "ERROR DETECTED IN PARSING FOR ADDING TASK";

	//Commands
	private static final String HOME= "home";
	private static final String DONE = "done";
	private static final String TODAY = "today";
	private static final String SOMEDAY = "someday";
	private static final String UPCOMING = "upcoming";
	private static final String ADD = "add";
	private static final String EXIT = "exit";
	private static final String SEARCH = "search";
	private static final String SAVE = "save";
	private static final String EDIT = "edit";
	private static final String UNDO = "undo";
	private static final String HELP= "help";
	private static final String DELETE = "delete";

	//Msg Indicating Presence of Time
	private static final String FROM = "from";
	private static final String TO = "to";
	private static final String BY = "by";
	private String input;
	OneTagLogger logger = OneTagLogger.getInstance();
	
	public OneTagParser(String input) {
		this.input = input.trim();
	}
	/**Takes input String from Logic and sends it for sorting.
	 * 
	 * @param input String given by Logic
	 * @return Cmd after parsing
	 */
	public Cmd toCmd() {
		String[] inputArr = input.split(SPACE);
		if(inputArr.length == NUM_ONE) {
			return parseOneWordCmd();
		}else {
			return parseLongInput();
		}
	}
	/**Determines whether cmd is 'View' ,'Help', 'Undo', 'Exit' and returns appropriate Cmd object.
	 * 
	 * @param input
	 * @return Cmd 
	 */
	private Cmd parseOneWordCmd() {
		COMMAND_TYPE command = getCommand(input);
		try{
			switch (command) {
				case UNDO:
						return new UndoCmd();
				case HELP:
				case HOME:
				case UPCOMING:
				case SOMEDAY :
				case TODAY :
				case DONE:
						return new ViewCmd(command);
				case EXIT:
						return new ExitCmd();
			default:
				break;
			}
		}catch(IllegalArgumentException e) {
			logger.log(Level.WARNING,ERROR_ADD_CMD, input);
			throw new Error(INVALID_MSG);
		}
		throw new Error(INVALID_MSG);
	}
	/**Separates the command from the message and sends the information for parsing.
	 * 
	 * @param input
	 * @return
	 */
	private Cmd parseLongInput() {
		String[] inputArr = input.split(SPACE,INPUT_SPLIT_THIRD);	
		String userCommand = inputArr[INPUT_SPLIT_FIRST];
		COMMAND_TYPE command = getCommand(userCommand);
		String message = inputArr[INPUT_SPLIT_SECOND].trim();
		switch(command) {
		case ADD:
			return new AddCmd(parseMsgforAddCmd(message));
		case EDIT:
			return parseEditDate(message);
		case DELETE: 	
			return new DeleteCmd(parseNum(message));
		case DONE : 
			return new CompletedCmd(parseNum(message));
		case SEARCH :
			return new SearchCmd(message);
		case SAVE : 
			return new SaveCmd(message);
		case TODAY:
		case UPCOMING:
		case SOMEDAY:
			return new ViewCmd(command,numForView(message));
		default:
			throw new Error(INVALID_MSG);
		}		
	}
	/** This task takes in string message and returns for parsing.
	 * 
	 * @param message
	 * @return Task object to Logic.
	 */	
	private Task parseMsgforAddCmd(String message) {
		String[] word = message.split(SPACE);
		String testWord = "" , dateString = null,taskDescription = null;	
		LocalDateTime endDateTime = null, startDateTime = null , deadlineDateTime = null; 
		boolean isTimedTask = false, isDeadlineTask = false;
		int posKeyword = word.length - NUM_ONE;	
		
		for(int count = posKeyword ; count >= NUM_ZERO; count--) {
			testWord =word[count].trim();
			if(isTimedTask(testWord)){ 
				dateString = word[count+1] + SPACE;
				if(posKeyword == word.length- NUM_ONE) {
					dateString = getDateTimeString(dateString, posKeyword, word, count).trim();
					if(isValidDateTime(dateString)) {
						isTimedTask = true;
						endDateTime = parseDate(dateString);
						posKeyword = count;
					}
				}
				else {
					dateString = getNewDateTimeString(dateString, posKeyword, word,count);
					startDateTime = parseDate(dateString);
					posKeyword = count;
					taskDescription = getTaskDescription(posKeyword, word);
					return new Task(startDateTime, endDateTime, taskDescription);
				}
			}
			else if(isDeadlineTask(testWord)) {
				posKeyword = count;
				dateString = getDateString(word, message, count);
				if(isValidDateTime(dateString)){
					isDeadlineTask = true;
					deadlineDateTime = parseDate(dateString);
					taskDescription = getTaskDescription(posKeyword,word);
					return new Task(deadlineDateTime,taskDescription);
				}
			}
		}
		
		
		if(isFloatingTask(isDeadlineTask, isTimedTask)) {
			taskDescription=getTaskDescription(word.length,word);
			return new Task(taskDescription);
		}
		throw new Error(ERROR_ADD_CMD);
	}
	

	private boolean isValidDateTime(String dateString) {
		LocalDateTime testDate;
		String[] words = dateString.split(SPACE);
		for(String element: words) {
			testDate = parseDate(element.trim());
			if(testDate != null) {
				continue;
			}else if(testDate == null) {
				if(checkIfInteger(element)) {
					continue;
				}else{
				return false;
				}
			}
		}
		return true; 
	}

	private boolean checkIfInteger(String element) {
		 try { 
		        Integer.parseInt(element); 
		    } catch(NumberFormatException e) { 
		        return false; 
		    } catch(NullPointerException e) {
		        return false;
		    }
		    return true;
	}
	/**Parses the dateString and return an array with date & time information.
	 * 
	 * @param dateString
	 * @param dateParser
	 * @return infoDateTime
	 */
	public LocalDateTime parseDate(String dateString) {
		Instant instant = null;
		Parser dateParser = new Parser();
		List<DateGroup> listOfDates = dateParser.parse(dateString);
		for(DateGroup group:listOfDates) {	
			List<Date> dates = group.getDates();
			Date thisDate = dates.get(POS_ZERO);
			instant = Instant.ofEpochMilli(thisDate.getTime());
			break;
		}
		if(instant == null) {
			return null;
		}else {
		LocalDateTime dateTime = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
	    return dateTime;	
	}
	}
	/**Returns the dateString containing the date to be sent for parsing.
	 * 
	 * @param word
	 * @param message
	 * @param count
	 * @return dateString
	 */
	private String getDateString(String[] word, String message, int count) {
		String dateString;
		dateString = word[count+1] + SPACE;
		dateString = getParseDate(dateString, word, message, count);
		return dateString;
	}
	/**Returns Task object with dates edited.
	 * @param message
	 * @return	
	 */
	private EditCmd parseEditDate(String message) {
		message = message.trim();
		LocalDateTime dateTime;
		String[] inputArr = message.split(SPACE,INPUT_SPLIT_THIRD);
		int index = Integer.parseInt(inputArr[0].trim());
		String userChanges = inputArr[1].trim();
		if(userChanges.contains(BY)) {
			mainloop: 
			if(userChanges.lastIndexOf(BY) == 0) {//by something.
				if(userChanges.contains(TO)||userChanges.contains(FROM)){
					/*edit 1 by J.K. Rowling from <time> 
					 * edit 1 by J.K. Rowling to <time>
					 *edit 1 by J.K. Rowling from <date/time> to <date/time>
					 */
					break mainloop;
				}
				/*Sample Cases: edit <index> by <string>
				 * 1.edit 1 by April 25 2015 (user changes date)
				 * 2.edit 1 by J.K.Rowling (user changes task name to "by J.K.Rowling")
				 * 3.edit 1 by  J.K.Rowling someday (2 + change task to someday)
				 * 4.edit 1 by J.K Rowling by April 25 2015.
				 */ 
				String dateTimeString = userChanges.substring(2).trim();
				if(isValidDateTime(dateTimeString)) {
					//Case 1
					dateTime = parseDate(dateTimeString);
					return new EditCmd(index, dateTime, 3);
				}else{//by task description.
					String taskDescription = userChanges;
					if(taskDescription.endsWith(SOMEDAY)) {
						taskDescription = taskDescription.substring(0, taskDescription.lastIndexOf(SOMEDAY));
						taskDescription.trim();
						return new EditCmd(index, taskDescription,true);
					}
					//Case 2
					return new EditCmd(index,taskDescription);
				}
			}else{
				/*Sample Case: (edit <index> <string> by <string>)
				* 1. edit 1 pick up Johnson by tomorrow
				 * 2. edit 1 read CSLR by Thomas Cormen
				 * 3. edit 1 read CSLR by Thomas Cormen someday 
				 */
				int posLastBy = userChanges.lastIndexOf(BY);
				String taskDescription = userChanges.substring(0,posLastBy).trim();
				String dateTimeString = userChanges.substring(posLastBy+2).trim();
				/*Code: 
				 * edit 1 read CLRS by Thomas Cormen from today to tomorrow.
				 */
				if(isValidDateTime(dateTimeString)) {
					//Case 1 
					dateTime = parseDate(dateTimeString);
					return new EditCmd(index, taskDescription,dateTime,2);	
				}else {
					if(userChanges.endsWith(SOMEDAY)) {
						//Case 3
						taskDescription = userChanges.substring(0, userChanges.lastIndexOf(SOMEDAY));
						taskDescription.trim();
						return new EditCmd(index, taskDescription,true);
					}else{
						//Case 2.
						taskDescription = userChanges;
						return new EditCmd(index,taskDescription);
					}
				}	
			}
		}else if(userChanges.contains(FROM)) {
			int posLastFrom = userChanges.lastIndexOf(FROM);
			if(posLastFrom == 0){
				String from = userChanges.substring(0,4);
				String dateTimeString = userChanges.substring(4).trim();
				if(dateTimeString.contains(TO)) {
					System.out.println("Test code");
					int posLastTo = dateTimeString.lastIndexOf(TO);
					String stringFrom = dateTimeString.substring(0,posLastTo-1).trim();
					String stringTo = dateTimeString.substring(posLastTo + 2).trim(); 
					if(isValidDateTime(stringFrom) && isValidDateTime(stringTo)){
						LocalDateTime startDateTime = parseDate(stringFrom);
						LocalDateTime endDateTime = parseDate(stringTo);
						throw new Error(INVALID_MSG);
					}else if(!isValidDateTime(stringFrom) && !isValidDateTime(stringTo)) {
						String taskDescription = userChanges; 
						if(taskDescription.endsWith(SOMEDAY)) {
							taskDescription = taskDescription.substring(0, taskDescription.lastIndexOf(SOMEDAY));
							taskDescription.trim();
							return new EditCmd(index, taskDescription,true);
						}
						return new EditCmd(index, userChanges);
					}else if(!isValidDateTime(stringFrom) && isValidDateTime(stringTo)) {
						String taskDescription = from + stringFrom; 
						LocalDateTime endDateTime = parseDate(stringTo);
						return new EditCmd(index,taskDescription,endDateTime,2);
					}//Do not worry abt it being a to time. Let it pass to the to.
				}else{
					if(isValidDateTime(dateTimeString)) {
						LocalDateTime startDateTime = parseDate(dateTimeString);
						return new EditCmd(index,startDateTime,1);
					}else{
						String taskDescription = userChanges; 
						if(taskDescription.endsWith(SOMEDAY)) {
							taskDescription = taskDescription.substring(0, taskDescription.lastIndexOf(SOMEDAY));
							taskDescription.trim();
							return new EditCmd(index, taskDescription,true);
						}
						return new EditCmd(index, userChanges);
					}
				}
			}else {
					String taskDescription = userChanges.substring(0,userChanges.lastIndexOf(FROM)).trim();
					String dateTimeString = userChanges.substring(userChanges.lastIndexOf(FROM)+4).trim();
					if(dateTimeString.contains(TO)) {
						int lastPosTo = dateTimeString.lastIndexOf(TO);
						String startDateTimeString = dateTimeString.substring(0,lastPosTo-1).trim();
						String endDateTimeString = dateTimeString.substring(lastPosTo + 2).trim();
						if(isValidDateTime(startDateTimeString) && isValidDateTime(endDateTimeString)) {
							LocalDateTime startDateTime = parseDate(startDateTimeString);
							LocalDateTime endDateTime = parseDate(endDateTimeString);
							return new EditCmd(index,taskDescription,startDateTime,endDateTime);
						}else if(!isValidDateTime(startDateTimeString) && isValidDateTime(endDateTimeString)) {
							LocalDateTime endDateTime = parseDate(dateTimeString);
							taskDescription = userChanges.substring(0,userChanges.lastIndexOf(TO)).trim();
							return new EditCmd(index, taskDescription,endDateTime,2);
						}
					}
					if(isValidDateTime(dateTimeString)) {
						LocalDateTime startDateTime = parseDate(dateTimeString);
						return new  EditCmd(index,taskDescription,startDateTime,1);
					}else{
						taskDescription = userChanges; 
						if(taskDescription.endsWith(SOMEDAY)) {
							taskDescription = taskDescription.substring(0, taskDescription.lastIndexOf(SOMEDAY));
							taskDescription.trim();
							return new EditCmd(index, taskDescription,true);
						}
						return new EditCmd(index,userChanges);
					}
				}
			}else if(userChanges.contains(TO)) {
				int posLastTo = userChanges.lastIndexOf(TO);
				if(posLastTo == 0) {
					String dateTimeString = userChanges.substring(2).trim();
					if(isValidDateTime(dateTimeString)) {
						LocalDateTime endDateTime = parseDate(dateTimeString);
						return new EditCmd(index,endDateTime,2);
					}else {
						String taskDescription = userChanges; 
						if(taskDescription.endsWith(SOMEDAY)) {
							taskDescription = taskDescription.substring(0, taskDescription.lastIndexOf(SOMEDAY));
							taskDescription.trim();
							return new EditCmd(index, taskDescription,true);
						}
						return new EditCmd(index,taskDescription);
					}
				}else {
					String taskDescription = userChanges.substring(0,posLastTo).trim();
					String dateTimeString = userChanges.substring(posLastTo + 2).trim();
					if(isValidDateTime(dateTimeString)) {
						LocalDateTime endDateTime = parseDate(dateTimeString);
						return new EditCmd(index,taskDescription,endDateTime,2);
					}else{
						taskDescription = userChanges;
						if(taskDescription.endsWith(SOMEDAY)) {
							taskDescription = taskDescription.substring(0, taskDescription.lastIndexOf(SOMEDAY));
							taskDescription.trim();
							return new EditCmd(index, taskDescription,true);
						}
						return new EditCmd(index,taskDescription);
					}
				}
			}
		String taskDescription = userChanges.trim();
		if(taskDescription.equals(SOMEDAY)) {
			return new EditCmd(index,true);
		} else if(taskDescription.endsWith(SOMEDAY)) {
			taskDescription = taskDescription.substring(0, taskDescription.lastIndexOf(SOMEDAY));
			taskDescription.trim();
			return new EditCmd(index, taskDescription,true);
		}
		return new EditCmd(index,taskDescription);
		
	}
	
	/**This method returns the getParseDate
	 * 
	 * @param parseDate
	 * @param word
	 * @param message
	 * @param count
	 * @return
	 */
	private String getParseDate(String parseDate, String[] word,String message, int count) {
		for(int i = count + 2 ; i < getNumWords(message); i++) {
			parseDate += word[i] + SPACE;
		}
		return parseDate;
	}

	/**Returns description of Task.
	 * @param posKeyword
	 * @param word
	 * @return taskDescription
	 * 
	 */
	private String getTaskDescription(int posKeyword, String[] word) {
		String taskDescription;
		taskDescription = word[POS_ZERO] + SPACE ;
		for(int i = POS_ONE; i < posKeyword ; i++) {
			taskDescription += word[i] + SPACE;			
		}
		return taskDescription;
	}

	/**This method returns the date and time string which can be parsed by the parser.
	 * 
	 * @param parseDate
	 * @param posKeyword
	 * @param word
	 * @param count
	 * @return parseDate
	 */
	private String getDateTimeString(String parseDate, int posKeyword,String[] word, int count) {
		for(int i = count + 2; i <= posKeyword; i++) {
			parseDate += (word[i] + " ");	
		}
		return parseDate;
	}
	/**Returns the string of date and time for the "from DATE&TIME" component as "to DATE&TIME" has been parsed.
	 * @param parseDate
	 * @param posKeyword
	 * @param word
	 * @param count
	 * @return parseDate.
	 */	
	private String getNewDateTimeString(String parseDate, int posKeyword,
			String[] word, int count) {
		for(int i = count + 2; i < posKeyword; i++)	{
			parseDate += (word[i] + SPACE);
		}
		return parseDate;
	}	
	/**This method converts the integer of String type to integer of Int type
	 * 
	 * @param message (type String)
	 * @return integer value of the string
	 */
	private int parseNum(String message) {
		if(isValidDateTime(message)) {
			return Integer.parseInt(message);
		}else{
			return -1; 
		}
	}
	/**This method converts the integer of String type to integer of Int type for ViewCmd
	 * 
	 * @param message (type String)
	 * @return integer value of the string
	 */
	private int numForView(String element) {
		int num;
		 try { 
		        num = Integer.parseInt(element); 
		        if(num == 0){
		        	return 1;
		        }
		        else{
		        	return num;
		        }
		    } catch(NumberFormatException e) { 
		        return -1;
		    } catch(NullPointerException e) {
		        return -1;
		    }
	}
	/**Returns the number of words that the user has typed it.
	 * 
	 * @param input
	 * @return number of words that the user has entered into the command prompt.
	 */
	private int getNumWords(String  input) {	
		String inputArr[]=input.split(SPACE);
		return inputArr.length;
	}

	/**This method return true if the word tested is either a "from" or "to".
	 * 
	 * @param testWord
	 * @return
	 */
	private static boolean isTimedTask(String testWord) {
		return testWord.equalsIgnoreCase(FROM)|| testWord.equalsIgnoreCase(TO);
	}
	/**Returns true if testWord is "BY","AT","ON","IN" for deadlined task.
	 * 
	 * @param testWord
	 */
	private boolean isDeadlineTask(String testWord) {
		return (testWord.equalsIgnoreCase(BY));
	}
	/**This method determines if the task is floating or not
	 * 
	 * @param isDeadlineTask
	 * @param isTimedTask
	 * @return true if floating task and false if otherwise.
	 */
	private boolean isFloatingTask(boolean isDeadlineTask, boolean isTimedTask) {
		return isDeadlineTask == false && isTimedTask == false;
	}	
/**
	/**This method converts the user comand into COMMAND_TYPE
	 * 
	 * @param input
	 * @return COMMAND_TYPE
	 */
	public static COMMAND_TYPE getCommand(String input) {
		assert(input == null);
		if (input.equalsIgnoreCase(HOME)) {
			return COMMAND_TYPE.HOME;
		}else if (input.equalsIgnoreCase(DONE)) {
			return COMMAND_TYPE.DONE;
		}else if(input.equalsIgnoreCase(TODAY)) {
			return COMMAND_TYPE.TODAY;
		}else if(input.equalsIgnoreCase(SOMEDAY)) {
			return COMMAND_TYPE.SOMEDAY;
		}else if(input.equalsIgnoreCase(UPCOMING)) {
			return COMMAND_TYPE.UPCOMING;
		}else if (input.equalsIgnoreCase(ADD)) {
			return COMMAND_TYPE.ADD;
		} else if (input.equalsIgnoreCase(EXIT)) {
			return COMMAND_TYPE.EXIT;
		} else if (input.equalsIgnoreCase(SEARCH)) {
			return COMMAND_TYPE.SEARCH;
		} else if (input.equalsIgnoreCase(SAVE)) {
			return COMMAND_TYPE.SAVE;
		} else if (input.equalsIgnoreCase(EDIT)) {
			return COMMAND_TYPE.EDIT;
		} else if (input.equalsIgnoreCase(UNDO)) {
			return COMMAND_TYPE.UNDO;
		} else if (input.equalsIgnoreCase(HELP)) {
			return COMMAND_TYPE.HELP;
		} else if (input.equalsIgnoreCase(DELETE)) {
			return COMMAND_TYPE.DELETE;
		} else {
			return COMMAND_TYPE.INVALID;
		}
	}	
	@SuppressWarnings("unused")
	private static String getMessage(String input) {
		return input;
	}
}


	// End of segment: C:\Users\Ganga\workspace\main\src\OneTagParser.java





	/**
	 * origin: C:\Users\Ganga\workspace\main\src\OneTagParserTest.java
	 */

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

public class OneTagParserTest {
	private static final int TEST_INDEX = 1;
	private static final String ADD_FLOATING ="add 123";
	private static final String ADD_TIMED = "add meet with Mr.Tom from 12pm to 1pm";
	private static final String ADD_DEADLINE = "add meet with Mr.Tom by tomorrow";
	private static final String EDIT_SOMEDAY = "edit 1 someday";
	private static final String EDIT_TASK_DESCRIPTION = "edit 1 meet with Mr.Tom";
	private static final String EDIT_TD_SOMEDAY = "edit 1 meet with Mr.Tom someday";
	private static final String EDIT_TIME_1 = "edit 1 from 12pm";
	private static final String EDIT_TIME_2 = "edit 1 to 12pm";
	private static final String EDIT_TIME_3 = "edit 1 by 12pm";
	private static final String EDIT_START_END = "edit 1 from 12pm to 1pm";
	private static final String EDIT_TD_TIME_1 = "edit 1 meet with Mr.Tom from 12pm";
	private static final String EDIT_TD_TIME_2 = "edit 1 meet with Mr.Tom to 12pm";
	private static final String EDIT_TD_TIME_3 = "edit 1 meet with Mr.Tom by 12pm";
	private static final String EDIT_TD_TIME = "edit 1 meet with Mr.Tom from 12pm to 1pm";
	private static final String UNDO = "undo";
	private static final String HOME = "home";
	private static final String UPCOMING_ONE = "upcoming 1";
	private static final String DELETE = "delete 1";
	private static final String SAVE = "save D://";
	private static final String DONE = "done 1";
	private static final String SEARCH = "search tom";
	
	private AddCmd addCmd_FLOATING;
	private AddCmd addCmd_TIMED;
	private AddCmd addCmd_DEADLINE;
	
	private EditCmd editCmd_SOMEDAY;
	private EditCmd editCmd_TASK_DESCRIPTION;
	private EditCmd editCmd_TD_SOMEDAY;
	private EditCmd editCmd_TIME_1;
	private EditCmd editCmd_TIME_2;
	private EditCmd editCmd_TIME_3;
	private EditCmd editCmd_START_END;
	private EditCmd editCmd_TD_TIME_1;
	private EditCmd editCmd_TD_TIME_2;
	private EditCmd editCmd_TD_TIME_3;
	private EditCmd editCmd_TD_TIME;
	
	private UndoCmd undo;
	
	private ViewCmd view;
	private ViewCmd view_one;
	
	private SaveCmd save;
	
	private DeleteCmd delete; 
	
	private CompletedCmd done;
	
	private SearchCmd search;
	
	private Task task_FLOATING;
	private Task task_TIMED;
	private Task task_DEADLINE;
	
	private OneTagParser testParser_add_FLOATING = new OneTagParser(ADD_FLOATING);
	private OneTagParser testParser_add_TIMED = new OneTagParser(ADD_TIMED);
	private OneTagParser testParser_add_DEADLINE = new OneTagParser(ADD_DEADLINE);
	private OneTagParser testParser_edit_SOMEDAY = new OneTagParser(EDIT_SOMEDAY);
	private OneTagParser testParser_edit_TASK_DESCRIPTION = new OneTagParser(EDIT_TASK_DESCRIPTION);
	private OneTagParser testParser_edit_TD_SOMEDAY = new OneTagParser(EDIT_TD_SOMEDAY);
	private OneTagParser testParser_edit_TIME_1 = new OneTagParser(EDIT_TIME_1);
	private OneTagParser testParser_edit_TIME_2 = new OneTagParser(EDIT_TIME_2);
	private OneTagParser testParser_edit_TIME_3 = new OneTagParser(EDIT_TIME_3);
	private OneTagParser testParser_edit_START_END = new OneTagParser(EDIT_START_END);
	private OneTagParser testParser_edit_TD_TIME_1 = new OneTagParser(EDIT_TD_TIME_1);
	private OneTagParser testParser_edit_TD_TIME_2 = new OneTagParser(EDIT_TD_TIME_2);
	private OneTagParser testParser_edit_TD_TIME_3 = new OneTagParser(EDIT_TD_TIME_3);
	private OneTagParser testParser_edit_TD_TIME = new OneTagParser(EDIT_TD_TIME);
	private OneTagParser testParser_undo = new OneTagParser(UNDO);
	private OneTagParser testParser_view = new OneTagParser(HOME);
	private OneTagParser testParser_view_one = new OneTagParser(UPCOMING_ONE);
	private OneTagParser testParser_delete = new OneTagParser(DELETE);
	private OneTagParser testParser_save = new OneTagParser(SAVE);
	private OneTagParser testParser_done = new OneTagParser(DONE);
	private OneTagParser testParser_search = new OneTagParser(SEARCH);
//	public Task(LocalDateTime end, String description);
//	public Task(String taskDescription);
//	public Task(LocalDateTime start, LocalDateTime end, String description);
	@Before
	public void initialize() {
		task_FLOATING = new Task("123");
		addCmd_FLOATING = new AddCmd(task_FLOATING);
		task_TIMED = new Task(testParser_add_TIMED.parseDate("26 April 2015"),testParser_add_TIMED.parseDate("27 April 2015"), "meet with Mr.Tom");
		task_DEADLINE = new Task(testParser_add_DEADLINE.parseDate("tomorrow"),"meet with Mr.Tom");
		
		addCmd_FLOATING = new AddCmd(task_FLOATING);
		addCmd_TIMED = new AddCmd(task_TIMED);
		addCmd_DEADLINE = new AddCmd(task_DEADLINE);
		
		editCmd_SOMEDAY = new EditCmd(TEST_INDEX, true);
		editCmd_TASK_DESCRIPTION = new EditCmd(TEST_INDEX,"meet with Mr.Tom");
		editCmd_TD_SOMEDAY = new EditCmd(TEST_INDEX,"meet with Mr.Tom",true);
		editCmd_TIME_1 = new EditCmd(TEST_INDEX,testParser_edit_TIME_1.parseDate("12pm"),1);
		editCmd_TIME_2 = new EditCmd(TEST_INDEX,testParser_edit_TIME_2.parseDate("12pm"),2);
		editCmd_TIME_3 = new EditCmd(TEST_INDEX,testParser_edit_TIME_3.parseDate("12pm"),3);
		editCmd_START_END = new EditCmd(TEST_INDEX,testParser_edit_START_END.parseDate("12pm"),testParser_edit_START_END.parseDate("1pm"));
		editCmd_TD_TIME_1 = new EditCmd(TEST_INDEX,"meet with Mr.Tom", testParser_edit_TD_TIME_1.parseDate("12pm"),1);
		editCmd_TD_TIME_2 = new EditCmd(TEST_INDEX, "meet with Mr.Tom", testParser_edit_TD_TIME_2.parseDate("12pm"),2);
		editCmd_TD_TIME_3 = new EditCmd(TEST_INDEX,"meet with Mr.Tom", testParser_edit_TD_TIME_3.parseDate("12pm"),3);
		editCmd_TD_TIME = new EditCmd(TEST_INDEX,"meet with Mr.Tom", testParser_edit_TD_TIME.parseDate("12pm"),testParser_edit_TD_TIME.parseDate("1pm"));	
		
		undo = new UndoCmd();
		view = new ViewCmd(OneTagParser.getCommand(HOME));
		view_one = new ViewCmd(OneTagParser.getCommand("upcoming"),1); 
		
		delete = new DeleteCmd(TEST_INDEX);
		
		save = new SaveCmd("D://");
		
		done = new CompletedCmd(TEST_INDEX);
		
		search = new SearchCmd("tom");
	}
	
	@Test
	public void test() {
		assertFalse(addCmd_FLOATING.equals(testParser_add_FLOATING.toCmd()));
		assertFalse(addCmd_TIMED.equals(testParser_add_TIMED.toCmd()));
		assertFalse(addCmd_DEADLINE.equals(testParser_add_DEADLINE.toCmd()));
	//	assertTrue(editCmd_SOMEDAY.equals(testParser_edit_SOMEDAY.toCmd()));
// 		assertFalse(editCmd_TASK_DESCRIPTION.equals(testParser_edit_TASK_DESCRIPTION.toCmd()));
		assertFalse(editCmd_TD_SOMEDAY.equals(testParser_edit_TD_SOMEDAY.toCmd()));
	//	assertFalse(editCmd_TIME_1.equals(testParser_edit_TIME_1.toCmd()));
		assertFalse(editCmd_TD_TIME_2.equals(testParser_edit_TIME_2.toCmd()));
		assertFalse(editCmd_TD_TIME_3.equals(testParser_edit_TIME_3.toCmd()));
	
	//	assertTrue(editCmd_TD_TIME.equals(testParser_edit_TD_TIME.toCmd()));	
		assertTrue(view_one.equals(testParser_view_one.toCmd()));
		assertTrue(search.equals(testParser_search.toCmd()));
		assertTrue(delete.equals(testParser_delete.toCmd()));
		assertTrue(view.equals(testParser_view.toCmd()));
		assertTrue(undo.equals(testParser_undo.toCmd()));
		assertTrue(done.equals(testParser_done.toCmd()));
	//	assertTrue(save.equals(testParser_save.toCmd()));
	}
}

	// End of segment: C:\Users\Ganga\workspace\main\src\OneTagParserTest.java





